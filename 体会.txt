(1)单一职责原则(SRP),就一个类而言，应该仅有一个引起变化的原因.
	这个原则在实际应用中，很难去做区分，尽量保证模块，类的原子性就好，不用刻意
去将就。
(2)开放-封闭原则
	软件实体（类，模块、函数等等）,应该具有拓展性，不可修改，这条原则在实际应
用相当高。对拓展是开放的，修改是关闭的。

(3)依赖倒转原则
	高层模块不应该依赖低层模块，粮改都应该依赖抽象。
	抽象不应该依赖细节。细节应该依赖抽象。
(4)里氏代换原则
	子类型必须能替换掉它们的父类型。
(5)迪米特法则: 如果两个类不彼此直接通信，name这两个类就不应当发生直接的相互作用。
如果其中一个类需要调用另外个类的某一方法的话，可以通过第三者转发这个调用。
	
	
装饰者模式:
	动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为
灵活。
	装饰模式是为已有功能动态地添加更多功能的一种方式。适用，当系统需要新功能的
时候


代理模式： 为其他对象提供一种代理以控制对这个对象的访问。
	适用： 1)远程代理，为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个
对象存在不同地址空间的事实。
		   2) 虚拟代理，是根据需要创建开销很对的对象。通过它存放实例化需要长时
		    间的真实对象
		   3）安全代理,用来控制真实对象访问时的权限。
		   4)智能指引，指当调用真实的对象事，代理处理另外些事。
		   
原型模式： 
	用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
	
模板方法模式:
	通过把不变行为搬移到超累，去除子类中的重复代码体现它的优势。
	
外观模式: 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层呢个接口，
这个接口使得这子系统更加容易使用。

建造者模式: 
	建造者模式的好处就是使得建造代码与表示代码分离，由于建造者隐藏了该产品是如
何组装的，所以若需要改变一个产品的内部表示，只需要要定义一个具体的建造者就可以了。
	
观察者模式：
	定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题
对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

抽象工厂模式: 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。


状态模式: 
	当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类。
	适用: 当一个对象的行为取决于他的状态，并且它必须在运行时刻根据状态改变他
	行为时.
	
适配器模式: 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于
不兼容而不能一起工作的那些类可以一起工作.

备忘录:在不破坏封装性的前提下，捕获一个对象内部状态，并在改对象之外保存这个状态。
还提供恢复到原先保存的状态。


组合模式: 将对象组合树形结构以表示 ‘部分整体’的层次结构。组合模式使得用户对单个
独享和组合对象的使用具有一致性。

迭代器模式: 提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露改对象的内部
表示


单例模式:
	保证一个类仅有一个实例，并提供一个访问他的全局访问点
合成/聚合复用原则:
	尽量使用合成/聚合，尽量不要用类继承.
	聚合表示一种弱‘拥有’关系，体现的是A对象可以包含B对象，但B对象不是A对象的一
一部分；合成则是一种强'拥有'关系，体现了严格的部分和整体的关系部分和整体的生命
周期一样.

桥接模式: 将抽象部分与它的实现部分分离，使它们都可以独立的变化.


命令模式: 将一个请求封装为一个对象，从而是你可用不同的请求对客户进行参数化；
对请求排队或记录请求日志，以及支持可撤销的操作。
	优点: 
		第一，它能较容易的设计一个命令队列；第二，在需要的情况下，可以较轻易地
	将命令记入日志；第三，允许请求一方决定是否要否决请求，第四，可以容易的实现
	对请求的撤销和重做 ；第五，新加命令不影响其它的类。
	
责任链模式:
	使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将
这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止.

中介者模式(Mediator)：	
	用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，
从而使器耦合松散，而且可以独立地改变它们之间的交互。